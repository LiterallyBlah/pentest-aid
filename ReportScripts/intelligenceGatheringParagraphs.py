from docx import Document
from Scripts import clearConsole
import json


def main(json_file):
    # Select the name of the document you would like the output to direct to. (you can include output path too)

    # opens data.json and stores the variables dictionary data.
    with open(json_file) as f:
        data = f.read()
    jsonData = json.loads(data)

    # grabs basic information found in the data.json - then used in the variables function.
    global variables
    variables = {
        "{{Client}}": jsonData['{{Client}}'],
        "outputDoc": jsonData['outputDoc']
    }

    # Select the name of the document you would like the output to direct to. (you can include output path too)
    output_file_path = variables['outputDoc']

    global output_document
    output_document = Document(output_file_path)

    osintOptions()
    addHeaders()
    ReplaceVariables()
    # Save changes to the output file.
    output_document.save(output_file_path)


# for the key and value in the variables dictionary, look for the key in the template docx file and replace with value.
# this applies to both tables and regular paragraphs. I haven't tested it with text boxes.
def ReplaceVariables():
    for key, value in variables.items():
        replace_text_in_paragraph(key, value)

    for key, value in variables.items():
        replace_text_in_table(key, value)



# Search and replace function for paragraphs.
def replace_text_in_paragraph(search, replace):
    # for every paragraph in docx template, 
    for paragraph in output_document.paragraphs:
        # if what you search for is in the paragraph text, 
        if search in paragraph.text:
            inline = paragraph.runs
            # for every word in the paragraph text,
            for item in inline:
                # if what you search is in the text,
                if search in item.text:
                    # the text is replaced by what you set.
                    item.text = item.text.replace(search, replace)


# Search and replace function for tables
def replace_text_in_table(search, replace):
    # for every table in the docx template,
    for table in output_document.tables:
        # look at every row in the tables,
        for row in table.rows:
            # for every cell in the rows,
            for cell in row.cells:
                # for every paragraph in the cells,
                for paragraph in cell.paragraphs:
                    # if what you search for is in the paragraph,
                    if search in paragraph.text:
                        # replace the search with what you want to replace it with.
                        paragraph.text = paragraph.text.replace(search, replace)


# This function stores the osint paragraphs and adds them to the output docx file.
def osintOptions():
    global options
    options = []

    # Creates a list out of the keys in assessments_paragraphs.
    for key in osint_paragraphs.keys():
        options.append(key)

    clearConsole.clearConsole()
    print("Please choose one or more of the below sections to add.\nExample: 1 3 2 4")
    num = 0
    # for each OSINT option,
    for option in options:
        # print a number with '. ' and then the option,
        num = num + 1
        print(str(num) + '. ' + option)

    global osintChoices
    osintChoices = input("\n\n> ")
    osintChoices = osintChoices.split()

    # paragraphs is equal to the paragraphs stored in the docx template.
    paragraphs = output_document.paragraphs

    num = 0
    # for each key in the reconnaissance paragraph dictionary,
    for key in osint_paragraphs.keys():
        num = num + 1
        # check to see if the number and key were under the paragraph selection.
        addParagraph(str(num), key)

    # for every paragraph in the output docx file,
    for paragraph in output_document.paragraphs:
        # replace {{RECONNAISSANCE}} with nothing.
        replace_text_in_paragraph("{{OSINT}}", "")

# Add paragraphs selected by the user.
def addParagraph(num, para):
    paragraphs = output_document.paragraphs
    # if the number is in the selected paragraphs,
    if num in osintChoices:
        # for each paragraph in the output docx file,
        for paragraph in paragraphs:
            # if {{OSINT}} is in the paragraph text,
            if '{{OSINT}}' in paragraph.text:
                # insert paragraph before {{OSINT}}.
                # NOTE: each paragraph inserted is a block of XML. It is essential to insert each paragraph one-by-one.
                # If you don't, then the headers will cluster together.
                # The headers insert themselves before the XML block of each paragraph.
                paragraph.insert_paragraph_before(text=osint_paragraphs[para]).text


# Adds headers before paragraphs.
def addHeaders():
    paragraphs = output_document.paragraphs

    # for key and value found in the recon paragraphs dictionary,
    for key, value in osint_paragraphs.items():
        # for every paragraph in the output docx paragraphs,
        for paragraph in paragraphs:
            # if the value is found in the paragraph text,
            if value in paragraph.text:
                # insert header before paragraph
                paragraph.insert_paragraph_before(text=key, style="Heading 3").text


# Simply add some paragraphs here, and it should add them as an option without issue... It "should".
global osint_paragraphs
osint_paragraphs = {
    "Identified Email Addresses": "Email addresses are an important part of OSINT, providing a wealth of "
                                  "information about a subject. The information available about an e-mail address "
                                  "depends on a number of different factors, like how old is the e-mail address, "
                                  "how widely the owner has published it on the internet, and whether the "
                                  "provider is a common e-mail provided like Gmail or others, or whether the "
                                  "e-mail address is tied to its own company domain name.\n\n",
    "Pastebins": "Pastebin is an essential source of valuable information for Digital Investigators as it is "
                 "often used to ‘dump’ leaked information ranging from details of alleged CSAM criminals in "
                 "addition to breached user credentials. In this case, we can use Pastebin to identify any "
                 "potentially sensitive information regarding {{Client}}.\n\n",
    "Potential Usernames": "One piece of evidence that adds value to investigating social media threats is the threat "
                           "actor’s chosen username. Usernames can hold meaning to the individual, and as a result provide "
                           "useful information when expanding investigations to different social platforms. Depending on "
                           "the platform, the username which appears on the actor’s account can lead to other monikers you "
                           "can explore that could act as investigational pivots. This can be especially useful when "
                           "applying this to the scope.\n\n",
    "Domains And Subdomains": "Being able to discover subdomains is an essential part of researching an "
                              "organisation. Behind a company’s main domain there are many other subdomains that "
                              "can provide useful information about an organisation’s structure, technology, "
                              "and business practices. Finding subdomains is not always straightforward though. "
                              "Common subdomains such as mail.example.com or cpanel.example.com are easy enough "
                              "to find, but larger organisations can have hundreds or even thousands of "
                              "subdomains as part of their digital estate.\n\n",
    "Darkweb Mentions": "The Dark Web or Dark Net is among the most challenging environments for OSINT researchers to work "
                        "in. It’s used more and more for illegitimate activity by nefarious actors. The dark web is a "
                        "subset of the internet that is accessed via special means, such as a TOR browser, and is not "
                        "indexed. Searching through the dark web and identifying information regarding {{Client}} and the "
                        "scope will help us expose any information that can be taken advantage of.\n\n"
}


if __name__ == '__main__':
    main()
