from Scripts import NessusCaller
import json
import time
from Scripts import NessusFileDownloader


# For the sake of reusing data from main.py, main() requires the input within the config dictionary in main.py.
# I should probably update the name main.py to something else, it's confusing to explain the above.
# main() simply creates a scan name using the 'Client', 'Assessment', and 'Reference' within data.json.
# main() then calls NessusScan(), waits a bit after its complete, and then exports the scan as a nessus file.
def main(PathToProject, Json_File, NessusUsername, NessusPassword, NessusHost, NessusPolicy, option):
    global nessus
    nessus = NessusCaller.NessusRequest(username=NessusUsername, password=NessusPassword, host=NessusHost)

    # opens data.json and stores the variables' dictionary data.
    with open(Json_File) as f:
        data = f.read()
    jsonData = json.loads(data)

    # grabs basic information found in the data.json - then used in the variables function.
    global variables
    variables = {
        "Client": jsonData['{{Client}}'],
        "Scope": jsonData['{{Scope}}'],
        "Assessment": jsonData['{{Assess}}'],
        "Reference": jsonData['{{Ref}}'],
    }

    global scan_name
    scan_name = variables['Client'] + ' - ' + variables['Assessment'] + ': ' + variables['Reference']

    if option == 1:
        NessusScan(NessusPolicy)
        time.sleep(5)
        ExportScan(PathToProject)
    elif option == 2:
        ListPolicies()


# Run Nessus scan based on scope.
def NessusScan(policy):
    # check if scan is not there, if it isn't then start scan using a module
    if scan_name not in nessus.list_scans_module():
        nessus.launch_job_module(variables['Scope'], scan_name, policy)
        print("Scan not present, creating scan...")


# grabs the scan id of the created scan. Uses the specific scan name to identify the scan.
def GrabScanID():
    scans = nessus.list_scans_module()

    for key, value in scans.items():
        if key == scan_name:
            #print(value)
            return value


# Checks the scan status. Turns out to be useless, but I'll keep it here just in case.
def CheckScanStatus():
    status = nessus.get_status_module(GrabScanID())
    for key, value in status.items():
        return value


# Checks scan status, will output if it is available for download or not. If it is, it will download.
def ExportScan(path):
    loop = True
    while loop:
        print("Waiting...")
        loop = False
        if "running" in CheckScanStatus():
            time.sleep(5)
            loop = True
    nessus.export_file_module(str(GrabScanID()), path)


# It does as it says...
def ListPolicies():
    nessus.list_policies()

if __name__ == '__main__':
    main()

