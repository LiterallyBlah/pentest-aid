from ReportScripts import createReport, intelligenceGatheringParagraphs, reconnaissanceParagraphs
from Scripts import clearConsole, overwriteJsonData
from Scripts import ExportNessus
from Scripts import NessusToNamic
import json
import os

global config
config = {
    # Author name.
    "Author": "",
    # Path to project. Make sure to include the '/' at the end.
    "Path to Project": "",
    # Local path to the data.json file in project.
    "Json File": "",
    # Local path to the docx template.
    "Template File": "",
    # Local path to save/output file.
    "Output File": "",
    # server:port for nessus server.
    "Nessus Server": "127.0.0.1:8834",
    # Nessus username.
    "Nessus Username": "",
    # Nessus password.
    "Nessus Password": "",
    # run option 6 to list the policy IDs you have. Create 2 if you haven't got any,
    # 1 for web apps, the other for infrastructure. Insert the ID for the Web App policy.
    "Nessus Web Policy": 00,
    # run "Scripts/NessusCaller.py -lp" to list the policy IDs you have. Create 2 if you haven't got any,
    # 1 for web apps, the other for infrastructure. Insert the ID for the Infrastructure policy.
    "Nessus Infrastructure Policy": 00,
    # This is the command to run Namisoft. If you're on linux, you'll have to keep in the "cd ~/; wine"
    # before putting in the path.
    "Namicsoft Command": "",
    # Ensure you define the drive (for example: C:, Z:, etc). If you're in wine,
    # check .wine/dosdevices for your linux system drive (mine was the 'z:' drive).
    "Namicsoft Report": "",
    # The difference with 'Output File', and 'Namicsoft Template' is simply the defining the drive (z:).
    "Namicsoft Template": ""
}


# If you receive a json error message about the below lines, then add the following to data.json (the indent maybe off):
# {
#     "nessusFile": ""
# }
with open(config['Json File']) as f:
    data = f.read()
jsonData = json.loads(data)
# path to Nessus file FOLDER. Leave the {} rather than naming the nessus file. It will add the name of the
# file automatically. You'll find this option added below the config file where it opens the data.json.
config["Nessus File"] = "/{}".format(jsonData['nessusFile'])


def main():
    options()


# This function will ask if the user wants to overwrite the data.json with the data in createReport.py.
# file which stores the previously input data such as client information.
def reportCreation():
    overwrite = input("Running this will overwrite your data.\nAre you sure you want to continue? Y/n\n> ")
    if overwrite == "y" or overwrite == "" or overwrite == "y":
        overwriteJsonData.main("data.json")
    else:
        print("\nExiting program.")
        exit(1)
    createReport.main(config['Template File'], config['Output File'], config['Json File'], config['Author'])


def NessusPolicies():
    ExportNessus.main(config['Path to Project'], config['Json File'], config['Nessus Username'],
                      config['Nessus Password'], config['Nessus Server'], "", 2)

# Prompts user for the type of scan to run (web app or infra). Then checks to see if the autogenerated scan name
# is present. If it's not, it will create a scan, wait until it's complete, then download.
def NessusScan():
    print("Nessus Policy Selection:\n1. Nessus Web Policy\n2. Nessus Infrastructure Policy\n")
    scanPolicy = input("> ")
    policy = ""
    if scanPolicy == "1":
        policy = config['Nessus Web Policy']
    elif scanPolicy == "2":
        policy = config['Nessus Infrastructure Policy']
    else:
        print("Invalid Policy")
        exit(1)

    ExportNessus.main(config['Path to Project'], config['Json File'], config['Nessus Username'],
                      config['Nessus Password'], config['Nessus Server'], policy, 1)


# When a Nessus scan is downloaded, the name of the file is stored in data.json. It will then import that nessus
# file and export the results into a docx report.
def NamicImport():
    NessusToNamic.NamicReportGen(config['Namicsoft Command'], config['Nessus File'], config['Namicsoft Report'],
                                 config['Namicsoft Template'])


# options() is responsible for displaying the initial options. Once the user inputs options 1-3 (which are the
# ones which work), it will simply call the script whether its createReport.py or reconnaissanceParagraphs.py.
def options():
    clearConsole.clearConsole()
    print("Please pick what script you would like to add:")
    print("""
    REPORT SECTION
    1. Create Report
    2. Add OSINT Sections
    3. Add Recon Sections [MANUAL]
    4. Import Nessus Results [Namicsoft]
    
    SCANNER SECTION
    5. Start Nessus Scan
    6. List Nessus Policies""")
    inputOption = input("\n[1-5]> ")
    clearConsole.clearConsole()

    if inputOption == "1":
        reportCreation()
        main()
    elif inputOption == "2":
        intelligenceGatheringParagraphs.main(config['Json File'])
        main()
    elif inputOption == "3":
        reconnaissanceParagraphs.main(config['Json File'])
        main()
    elif inputOption == "4":
        NamicImport()
        main()
    elif inputOption == "5":
        NessusScan()
        main()
    elif inputOption == "6":
        NessusPolicies()
    else:
        print("Exiting...")
        exit(1)


if __name__ == '__main__':
    main()
